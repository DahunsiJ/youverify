#!/usr/bin/env groovy
pipeline {
    agent any
    
    environment {
        AZURE_CREDENTIALS = credentials('azure-service-principal')
        // ACTION = 'apply'  // You can modify this or make it a parameter for apply/destroy
        // RESOURCE_GROUP = 'your-azure-resource-group'
        // AKS_CLUSTER_NAME = 'your-aks-cluster-name'
    }
    
    stages {
        stage('Login to Azure') {
            steps {
                script {
                    def azureCredentialsJson = readJSON text: "${AZURE_CREDENTIALS}"
                    sh """
                        az login --service-principal \
                        --username ${azureCredentialsJson.clientId} \
                        --password ${azureCredentialsJson.clientSecret} \
                        --tenant ${azureCredentialsJson.tenantId}
                    """
                    // Optionally set the subscription
                    sh "az account set --subscription ${azureCredentialsJson.subscriptionId}"
                }
            }
        }
        stage('Checkout the GitHub Repository') {
            steps {
                git branch: "main", url: "https://github.com/DahunsiJ/youverify_DevSecOps.git"
            }
        }
        stage('Terraform Initialization') {
            steps {
                script {
                    dir('devSecOps/aks/terraformIAC') {
                        sh "terraform init"
                    }
                }
            }
        }
        stage('Terraform Format') {
            steps {
                script {
                    dir('devSecOps/aks/terraformIAC') {
                        sh "terraform fmt"
                    }
                }
            }
        }
        stage('Terraform Validate') {
            steps {
                script {
                    dir('devSecOps/aks/terraformIAC') {
                        sh "terraform validate"
                    }
                }
            }
        }
        stage('Terraform Plan') {
            steps {
                script {
                    dir('devSecOps/aks/terraformIAC') {
                        sh "terraform plan"
                    }
                }
            }
        }
        stage('Terraform Apply or Destroy') {
            steps {
                script {
                    dir('devSecOps/aks/terraformIAC') {
                        sh "terraform ${ACTION} --auto-approve"
                    }
                }
            }
        }
        // stage('Deploy to AKS') {
        //     steps {
        //         script {
        //             // Authenticate with AKS using the service principal
        //             sh """
        //                 az aks get-credentials --resource-group ${RESOURCE_GROUP} --name ${AKS_CLUSTER_NAME} --overwrite-existing
        //             """
        //             // Deploy the application
        //             dir('kubernetes') {
        //                 sh "kubectl apply -f nginx-deployment.yaml"
        //                 sh "kubectl apply -f nginx-service.yaml"
        //             }
        //         }
        //     }
        // }
    }
}
