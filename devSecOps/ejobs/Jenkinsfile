pipeline {
    agent any
    tools {
        jdk 'jdk17'
        nodejs 'node20'
    }
    environment {
        SCANNER_HOME = tool 'sonar-scanner'
        DOCKERHUB_CREDENTIALS = credentials('dockerhub')
        DOCKER_IMAGE = 'dahunsij/ejobs'
        DOCKER_NETWORK = 'ejobs_network'
        CONTAINER_NAME = 'ejobs'
    }
    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }
        stage('Clone Repository') {
            steps {
                script {
                    withCredentials([usernamePassword(credentialsId: 'GIT_PAT', usernameVariable: 'GITHUB_USER', passwordVariable: 'GITHUB_PASS')]) {
                        sh 'git clone https://${GITHUB_USER}:${GITHUB_PASS}@github.com/DahunsiJ/youverify_DevSecOps.git'
                        // sh 'git clone https://github.com/DahunsiJ/youverify_DevSecOps.git'
                        sh 'ls -al'
                        sh 'cd youverify_DevSecOps/devSecOps/ejobs && git checkout main'
                    }
                }
            }
        }
        stage('Read and Increment Version') {
            steps {
                dir('youverify_DevSecOps/devSecOps/ejobs') {
                    script {
                        // Read the version file
                        def version = readFile('version.txt').trim()
                        
                        // Split the version number and increment the last part
                        def parts = version.tokenize('.')
                        parts[2] = (parts[2].toInteger() + 1).toString() // Increment patch version
                        
                        // Rebuild the version string
                        def newVersion = parts.join('.')
                        
                        // Write the new version back to the file
                        writeFile(file: 'version.txt', text: newVersion)
                        
                        // Stage, commit, and push the new version
                        sh 'git add version.txt'
                        sh "git commit -m 'Update version to ${newVersion}'"
                        sh 'git push'
                        
                        // Set the new version as an environment variable
                        env.BUILD_VERSION = newVersion
                    }
                }
            }
        }
        stage('SonarQube Analysis') {
            steps {
                // dir('devSecOps/ejobs') {
                    withSonarQubeEnv('SonarQube-Servers') {
                        sh '''
                        $SCANNER_HOME/bin/sonar-scanner -Dsonar.projectName=ejobs_CICD \
                        -Dsonar.projectKey=ejobs_CICD \
                        -X
                        '''
                    }
                // }
            }
        }
        stage('Quality Gate') {
            steps {
                script {
                    waitForQualityGate abortPipeline: false, credentialsId: 'SonarQube-Token'
                }
            }
        }
        stage('Install Dependencies') {
            steps {
                dir('youverify_DevSecOps/devSecOps/ejobs') {
                    sh 'ls -la'
                    sh "npm install"
                    // sh "npm audit fix"
                    // sh "npm audit fix --force"
                    // sh "npm run build"
                }
            }
        }
        stage('TRIVY File Scan') {
            steps {
                // dir('devSecOps/ejobs') {
                    sh "trivy fs . > trivyfs.txt"
                // }
            }
        }
        stage('OWASP Dependency Check ') {
            steps {
                dependencyCheck additionalArguments: '--scan ./ --format XML ', odcInstallation: 'Dependency-Check'
                dependencyCheckPublisher pattern: '**/dependency-check-report.xml'
            }
        }
        stage('Docker Build & Push') {
            steps {
                dir('youverify_DevSecOps/devSecOps/ejobs') {
                    script {
                        withCredentials([usernamePassword(credentialsId: 'dockerhub', usernameVariable: 'DOCKER_USER', passwordVariable: 'DOCKER_PASS')]) {
                            docker.withRegistry('https://index.docker.io/v1/', 'dockerhub') {
                                
                                sh "docker build -t dahunsij/ejobs:latest -f Dockerfile ."

                                sh "docker tag dahunsij/ejobs:latest dahunsij/ejobs:${env.BUILD_VERSION}.RELEASE"
                                sh "docker push dahunsij/ejobs:${env.BUILD_VERSION}.RELEASE"
                                // Clean up old images with the name "ejobs"
                                sh '''
                                docker images | grep dahunsij/ejobs | grep -v ":${env.BUILD_VERSION}.RELEASE" | awk '{print $3}' | xargs docker rmi -f || true
                                '''

                                // Stop and remove any existing container with the same name
                                sh "docker stop ejobs || true"
                                sh "docker rm ejobs || true"

                                // // Run the container
                                sh "docker run -d -p 3002:3002 --name ejobs dahunsij/ejobs:${env.BUILD_VERSION}.RELEASE"
                            }
                        
                        }
                    }
                }
            }
        }
        stage('TRIVY Image Scan') {
            steps {
                sh "trivy image dahunsij/ejobs:${env.BUILD_VERSION}.RELEASE > trivyimage.txt"
            }
        }
        stage('Deploy to VM') {
            steps {
                sshagent(['vm-ssh-credentials']) {
                    sh '''
                    ssh yv_admin@52.224.66.61 "docker pull dahunsij/ejobs:${BUILD_VERSION}.RELEASE && docker stop ${CONTAINER_NAME} || true && docker rm ${CONTAINER_NAME} || true && docker run -d -p 3002:3002 --name ${CONTAINER_NAME} dahunsij/ejobs:${BUILD_VERSION}.RELEASE"
                    '''
                }
            }
        }
        
    }
}